---
import Svg from "../components/Svg.astro";
import Nav from "../components/Nav.astro";

interface Props {
  mainClasses?: string;
  bodyClasses?: string;
}

const { mainClasses, bodyClasses } = Astro.props;
---

<html
  lang="en"
  class="h-full w-full"
>
  <head>
    <meta charset="utf-8" />
    <meta
      name="description"
      content="Justin Awrey's personal website."
    />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1"
    />
    <title>Justin Awrey</title>
    <link
      rel="icon"
      type="image/x-icon"
      href="/favicon.ico"
    />
    <script>
      const circleSize = 15;
      const lifetime = 1;

      function drawCircle(x: number, y: number): void {
        const circle = document.createElement("div");
        circle.style.position = "absolute";
        circle.style.left = `${x}px`;
        circle.style.top = `${y}px`;
        circle.style.borderRadius = "50%";
        circle.style.width = `${circleSize}px`;
        circle.style.height = `${circleSize}px`;
        circle.style.backgroundColor = getComputedStyle(
          document.documentElement
        ).getPropertyValue("--ripple-color");
        circle.style.opacity = "0.2";
        circle.style.animation = `ripple ${lifetime}s ease-out`;
        circle.style.pointerEvents = "none";
        document.body.appendChild(circle);

        setTimeout(() => {
          document.body.removeChild(circle);
        }, lifetime * 1000);
      }

      window.addEventListener("mouseup", (e) => {
        drawCircle(e.pageX - circleSize / 2, e.pageY - circleSize / 2);
      });

      window.addEventListener("touchend", (e) => {
        for (const touch of e.touches) {
          drawCircle(
            touch.pageX - circleSize / 2,
            touch.pageY - circleSize / 2
          );
        }
      });
    </script>
    <script>
      const hasPreferenceSaved = !!localStorage.getItem("theme");

      let isDark: boolean;
      if (hasPreferenceSaved) {
        isDark = localStorage.getItem("theme") === "dark";
      } else {
        isDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
      }

      if (isDark) {
        document.documentElement.classList.add("dark");
      } else {
        document.documentElement.classList.remove("dark");
      }

      const button = document.getElementById("theme-toggle")!;

      function setText() {
        button.innerText = isDark ? "light" : "dark";
      }

      function setTheme() {
        localStorage.setItem("theme", isDark ? "dark" : "light");
      }

      function setRippleColor() {
        const color = isDark ? "white" : "black";
        document.documentElement.style.setProperty("--ripple-color", color);
      }

      setText();
      setTheme();
      setRippleColor();

      button.addEventListener("click", () => {
        isDark = !isDark;
        document.documentElement.classList.toggle("dark");
        setText();
        setTheme();
        setRippleColor();
      });
    </script>
    <style>
      @keyframes ripple {
        from {
          opacity: 0.3;
          transform: scale(0);
        }
        to {
          opacity: 0;
          transform: scale(2);
        }
      }
    </style>
  </head>
  <body
    class={`font-mono h-full w-full dark:bg-gray-800 dark:text-slate-400 ${bodyClasses}`}
  >
    <header
      class="fixed top-0 left-0 right-0 flex justify-between items-end text-xs px-3 pt-3 pb-4 dark:bg-[#1c222d] bg-white border-b-1 shadow-2xl dark:shadow-slate-800 md:text-base"
    >
      <div class="md:-mb-0.5">
        <Nav />
      </div>
      <div class="flex space-x-1.5 md:space-x-2 items-end">
        <button
          id="theme-toggle"
          class="underline hover:text-slate-600 hover:dark:text-slate-200 dark:text-slate-300 md:-mb-0.5"
        >
        </button>
        <a
          href="https://github.com/justinawrey"
          aria-label="See my Github page"
        >
          <Svg>
            <path
              d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"
            >
            </path>
          </Svg>
        </a>
        <a
          href="https://www.linkedin.com/in/justin-awrey-2b91a7119"
          aria-label="See my LinkedIn page"
        >
          <Svg
            ><path
              d="M4.98 3.5c0 1.381-1.11 2.5-2.48 2.5s-2.48-1.119-2.48-2.5c0-1.38 1.11-2.5 2.48-2.5s2.48 1.12 2.48 2.5zm.02 4.5h-5v16h5v-16zm7.982 0h-4.968v16h4.969v-8.399c0-4.67 6.029-5.052 6.029 0v8.399h4.988v-10.131c0-7.88-8.922-7.593-11.018-3.714v-2.155z"
            >
            </path>
          </Svg>
        </a>
      </div>
    </header>

    <main class={`mx-8 ${mainClasses}`}>
      <slot />
    </main>
  </body>
</html>
